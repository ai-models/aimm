name: pyinstaller

on:
  push:
    branches: [ dev, main, build_exe_2 ]
  workflow_dispatch:
jobs:
  build-lin:
    if: contains(github.event.head_commit.message, '[build]') # only run if commit message contains [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
#          pip-licenses -f plain-vertical -l --no-license-path -u --from all >> LICENSE
      - name: Generate change log
        run: |
          git clone https://github.com/visioninit/aimm
          cd aimm
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:' * %s' | sed '/Merge/d' > changelog.txt
          mv changelog.txt ..
          cd ..
      - name: Build Linux
        run: |
          pyinstaller --onefile aimm.py --add-data 'LICENSE:.' --name aimm --distpath dist/
          cp changelog.txt dist/
          cp LICENSE dist/
          cp resources/install/linux/Installation-Instructions.txt dist/
          mkdir out && cd dist && tar -zcvf ../out/aimm-linux-binary.tar.gz *
      - name: Tests
        if: contains(github.event.head_commit.message, '[tests]') # only run if commit message contains [build]
        run: |
          dist/aimm
          dist/aimm init
          dist/aimm add BSRGAN
          dist/aimm list
          dist/aimm remove BSRGAN
          dist/aimm search GFPGAN
      - name: set package version
        run: |
          echo "DEBIAN_PACKAGE_VERSION=$(dist/aimm --version | awk -F: '{print $2}' | tr -d ' ')+$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
      - name: Build Debian package
        run: |
          sudo apt-get update -y
          sudo apt-get install -y dpkg-dev devscripts
          sudo apt-get build-dep -y --no-install-recommends .
          dch --newversion $DEBIAN_PACKAGE_VERSION -D unstable -m 'Build Debian package.'
          debuild -b -us -uc
          mv ../*.deb .
#      - name: Upload Release Linux
#        uses: actions/upload-artifact@v3
#        with:
#          name: Linux Binary
#          path: |
#            dist/aimm
#            *.deb
      - name: ðŸ“‚ Deploy FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.2
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: "out/"
          server-dir: ""

#  build-win:
#    if: contains(github.event.head_commit.message, '[build]') # only run if commit message contains [build]
#    runs-on: windows-latest
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install pip-licenses
#        pip-licenses -f plain-vertical -l --no-license-path -u --from all >> LICENSE
#        pip install pyinstaller
#    - name: Build Windows
#      run: pyinstaller --onefile aimm.py --add-data 'LICENSE:.' --name aimm --distpath dist/
#    - name: Tests
#      if: contains(github.event.head_commit.message, '[tests]') # only run if commit message contains [build]
#      run: |
#        dist/aimm
#        dist/aimm init
#        dist/aimm add BSRGAN
#        dist/aimm list
#        dist/aimm remove BSRGAN
#        dist/aimm search GFPGAN
#    - name: Upload Release Windows
#      uses: actions/upload-artifact@v3
#      with:
#        name: Windows Binary
#        path: dist/aimm.exe

#  build-win-installer:
#    if: contains(github.event.head_commit.message, '[build]') # only run if commit message contains [build]
#    runs-on: windows-latest
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install pip-licenses
#        pip-licenses -f plain-vertical -l --no-license-path -u --from all >> LICENSE
#        pip install pynsist
#    - name: Build Windows-Installer
#      run: install/win-installer.bat
#    - name: Upload Release Windows-Installer
#      uses: actions/upload-artifact@v3
#      with:
#        name: Windows Installer
#        path: dist/win-installer/
#
#  build-mac:
#    if: contains(github.event.head_commit.message, '[build]') # only run if commit message contains [build]
#    runs-on: macos-11
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install pip-licenses
#        pip-licenses -f plain-vertical -l --no-license-path -u --from all >> LICENSE
#        pip install pyinstaller
#    - name: Build MacOS
#      run: pyinstaller --onefile aimm.py --name aimm --distpath dist/
#    - name: Test
#      run: |
#        dist/aimm
#        dist/aimm init
#        dist/aimm add BSRGAN
#        dist/aimm list
#        dist/aimm remove BSRGAN
#        dist/aimm search GFPGAN
#    - name: Upload ReleaseMacOS
#      uses: actions/upload-artifact@v3
#      with:
#        name: MacOS Binary
#        path: ./aimm
#
#  build-mac-installer:
#    if: contains(github.event.head_commit.message, '[build]') # only run if commit message contains [build]
#    runs-on: macos-11
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements.txt
#        pip install pip-licenses
#        pip-licenses -f plain-vertical -l --no-license-path -u --from all >> LICENSE
#        pip install pyinstaller
#    - name: Build MacOS
#      run: pyinstaller --onefile aimm.py --name aimm --distpath dist/
#    - name: Test
#      run: |
#        dist/aimm
#        dist/aimm init
#        dist/aimm add BSRGAN
#        dist/aimm list
#        dist/aimm remove BSRGAN
#        dist/aimm search GFPGAN
#    - name: Upload ReleaseMacOS
#      uses: actions/upload-artifact@v3
#      with:
#        name: MacOS Binary
#        path: ./aimm
